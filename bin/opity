#!/usr/bin/env ruby

require 'clamp'
require 'opity'

module Opity
  class Command < Clamp::Command
    option %w{-c --config}, '[CONFIG]', 'configuration file', environment_variable: 'OPITY_CONFIG', default: './.opity.yml' do |config|
      Opity.configfile = config
      Opity.reset!
    end
    option %w{-s --secrets}, '[SECRETS]', 'secret file', environment_variable: 'OPITY_SECRETS', default: '~/.opity.secrets' do |config|
      Opity.secretsfile = config
      Opity.reset!
    end
    option %w{--[no-]color}, :flag, 'colored output', default: true

    subcommand 'config', 'dump configuration' do
      def execute
        yaml = Opity.config.to_hash.to_yaml
        puts 'Config:'
        puts yaml
      end
    end

    subcommand 'secrets', 'dump configuration' do
      def execute
        yaml = Opity.secrets.to_hash.to_yaml
        puts 'Secrets:'
        puts yaml
      end
    end

    subcommand 'environments', 'show list of environments in configuration' do
      def execute
        print_environments
      end
    end

    subcommand 'resources', 'dump resources' do
      parameter '[ENVIRONMENT]', 'the environment to check'

      def execute
        return print_environments('must specify environment') unless environment
        puts "## environnent: #{environment}"
        list = Opity.config[environment].resources
        list.each do |r|
          puts "%-15s %s" % [r.type, r.name]
        end
      end
    end

    subcommand 'check', 'make sure your opity environment is configured correctly' do
      def execute
        Opity.check
      end
    end

    subcommand 'status', 'compare and contrast opity config to cloud resources' do
      parameter '[ENVIRONMENT]', 'the environment to check'

      def execute
        return print_environments('must specify environment') unless environment
        e = Opity.environment(environment)
        if color?
          puts "#{e.name}".colorize(:light_cyan)
          puts e.status.color_to_s
        else
          puts "#{e.name}"
          puts e.status.to_s
        end
      end
    end

    def print_environments(msg='environments')
      puts "#{msg}:"
      Opity.environments.each do |e|
        puts "* #{e.name}"
      end
    end
  end
end

begin
  Opity::Command.run
rescue => e
  puts "error: #{e.message}"
  e.backtrace.each { |l| puts "  #{l}" }
  exit 1
end
